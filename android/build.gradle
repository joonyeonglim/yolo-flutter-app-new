// Flutter SDKの場所を環境変数から取得（CI用）
def flutterRoot = System.getenv('FLUTTER_ROOT')
if (!flutterRoot) {
    // ローカル開発用にlocal.propertiesから読み込み
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('local.properties')
    if (localPropertiesFile.exists()) {
        localPropertiesFile.withReader('UTF-8') { reader ->
            localProperties.load(reader)
        }
        flutterRoot = localProperties.getProperty('flutter.sdk')
    }
}

// それでも見つからない場合はCIのFlutterアクションが設定するパスを使用
if (!flutterRoot && System.getenv('RUNNER_TEMP')) {
    def flutterPath = new File(System.getenv('RUNNER_TEMP'), 'flutter')
    if (flutterPath.exists()) {
        flutterRoot = flutterPath.absolutePath
    }
}

group = "com.ultralytics.yolo"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.2.1")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "com.ultralytics.yolo"
    compileSdk = 35

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString() // Use toString() for jvmTarget
    }

    // Configure Java Toolchain to use JDK 17
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
        
        // ネイティブライブラリビルド設定
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_STL=c++_shared"
            }
        }

        // サポートするABIを明示
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }
    
    // CMakeビルド設定
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    dependencies {
        // Flutter embedding - CI環境で見つからない場合でもビルドを続行
        if (flutterRoot) {
            compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm/flutter.jar")
            compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-arm64/flutter.jar") 
            compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-x86/flutter.jar")
            compileOnly files("$flutterRoot/bin/cache/artifacts/engine/android-x64/flutter.jar")
        } else {
            // Flutter SDKが見つからない場合は、代替としてembedding-releaseを使用
            compileOnly 'io.flutter:flutter_embedding_release:1.0.0-ee76268252c22f5c11e82a7b87423ca3982e51a7'
        }
        
        implementation("com.google.ai.edge.litert:litert:1.2.0")
        implementation("com.google.ai.edge.litert:litert-gpu:1.2.0")
        implementation('com.google.ai.edge.litert:litert-support-api:1.2.0')
        implementation('com.google.ai.edge.litert:litert-metadata:1.2.0')
        testImplementation("junit:junit:4.13.2")
        androidTestImplementation("androidx.test.ext:junit:1.1.5")
        androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
        implementation("org.yaml:snakeyaml:1.29")
        implementation("androidx.camera:camera-core:1.2.3")
        implementation("androidx.camera:camera-camera2:1.2.3")
        implementation("androidx.camera:camera-lifecycle:1.2.3")
        implementation("androidx.camera:camera-view:1.2.3")
        implementation("androidx.core:core-ktx:1.10.1")
        implementation("androidx.appcompat:appcompat:1.6.1")
        
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
